name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Format check with black
      run: |
        black --check .

    - name: Import sorting check with isort
      run: |
        isort --check-only .

    - name: Test with pytest
      run: |
        pytest --cov=sigma_sumo_converter --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with bandit
      run: |
        bandit -r . -x tests/

    - name: Check for known security vulnerabilities
      run: |
        safety check

  integration:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test basic converter functionality
      run: |
        python sigma_sumo_converter.py --help
        echo "✅ Sigma to Sumo Logic converter help command works"

    - name: Test simple conversion
      run: |
        mkdir -p test_output
        cat > test_rule.yml << 'EOF'
        title: Test Rule
        description: Simple test rule for CI
        level: medium
        tags:
            - attack.execution
        logsource:
            product: windows
            category: process_creation
        detection:
            selection:
                Image|endswith: test.exe
            condition: selection
        EOF
        python sigma_sumo_converter.py -i test_rule.yml -o test_output
        echo "✅ Basic conversion test completed"

    - name: Validate output structure
      run: |
        if [ -d "test_output/sumo_cse_rules" ]; then
          echo "✅ Output directory created successfully"
          find test_output -name "*.json" -type f | head -5
        else
          echo "⚠️  No output created, but tool ran without errors"
        fi
